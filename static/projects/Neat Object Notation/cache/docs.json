{"pgs": {"Getting Started": "# Neat Object Notation 0.6.16\n\n```\npip install neat-notation\n```\n\n To load your .neat file into python, call `neat_notation.load(filename:str)`.  It will return a dictionary/list containing the content of your file.\n\n A smart, modular and readable configuration file format for complex multifile solutions.\n\n## Comments\n\n```\n| Any lines which are to be commented out must start with a pipe character.\n| The pipe must ALWAYS be at the beginning of the line for comments.\n```\n\n## Global Scope\n\n By default the global scope of a Neat config file is a dictionary, if you wish to specify otherwise you must put this somewhere in your .neat file on its own line\n\n```\n~list\n```\n\n## Escape Character\n\nEscape characters can be used to use syntax characters inside of their syntaxes or to use the combination of characters that creates a token such as the environment variable wrapping token as their literal characters, like so:\n\n```\n[section\\] key\\]]\n\t\"\\:{this is my key\\}:\" : 123\n[-]\n| output:\n| {'section] key]': {':{this is my key}:': 123}}\n```\n\n", "Labeled and Unlabeled Structures": "## Labeled Structures\n\n```\n[This is where you write the key associated with your dictionary]\n\n\t\"This is a key to an inline dictionary\":{\"This is the key to an inline list\":()}\n\n| This [-] token denotes the end of a dictionary.\n[-]\n\n<This is where you write the key associated with your list>\n\n|\tThe line below is the 0th index of this labeled list and is a list with a single item,\n|\tThat single item is an empty dictionary\n\t({})\n\n| This <-> token denotes the end of a list.\n<->\n```\n\n## Unlabeled Structures\n\nIf you wish to create an unlabeled structure vertically you can do so like this:\n\n```\n~list\n\n{\n\t\"Some key\":29873198273\n}\n\n```\n\nAnother example:\n\n```\n<section name>\n\t{\n\t\t[inner section name]\n\t\t\t\"some key\": True\n\t\t[-]\n\t\t\"another key\": \"abc\"\n\t}\n<->\n```\n", "Modules": "## Modules\n\nImporting only specific sections of a module:\n\n```\n| This file is called filename.neat\n<section name>\n\t{\n\t\t[inner section name]\n\t\t\t\"some key\": True\n\t\t[-]\n\t\t\"another key\": \"abc\"\n\t}\n<->\n```\n\n```\n|this is where we are importing the module\nmod filename : 'section name'.0.'inner section name'\n\n| Alternate syntax\n\n* foldername.filename : 'section name'.0.'inner section name'\n```\n\nImporting a whole module:\n\n```\n|this file is called module.neat\n[section]\n\t1:\"abc\"\n[-]\n```\n\n```\n| This is where we import module.neat\nmod module\n\n[another section]\n\t\"def\":2\n[-]\n\n| Result:\n| {\"module\":{\"section\":{\"1\":\"abc\"}},\"another section\":{\"def\":2}}\n```", "Auto Increment": "## Auto-Increment\n\nWhen inside a dictionary you can prefix values with `- value` to autoincrement their key as an integer from the last integer key you set. For example:\n\n```\n[section]\n\t- \"foo\"\n\t- \"bar\"\n\t- 123\n\t7: true\n\t- 0.1\n\t- -22.2\n\t- -12\n[-]\n\n| output:\n| {\"section\":{0: \"foo\", 1: \"bar\", 2: 123, 7: True, 8: 0.1, 9: -22.2, 10: -12}}\n```", "Aliases": "## Alias\n\nAliases can be used to add items to sections outside of that section and its parent.\nThe left hand side of the : is the alias name.  The right hand side of the : is the alias path.\n\n```\n<section name>\n\t{\n\t\t[inner section name]\n\t\t\t\"some key\": True\n\t\t[-]\n\t\t\"another key\": \"abc\"\n\t}\n<->\n\n| this is the alias declaration\nalias alias_name : [section name] 0 [inner section name]\n\n| the name of the alias, in this case alias_name, marks the start of an alias section.\nalias_name\n\t\"some other key\": false\n| The /-/ token marks the end of an alias section\n/-/\n\n| Result:\n| {\"section name\":[{\"inner section name\":{\"some key\":True,\"some other key\":False},\"another key\":\"abc\"}]}\n```\n", "Environment Variables": "## Environment Variables\n\nEnvironment variables can be used in strings and section keys.\n\n```\n| For this example lets say ENVIRONMENT_VARIABLE_NAME = \"3\"\n\n[:{ENVIRONMENT_VARIABLE_NAME}:]\n\t\":{ENVIRONMENT_VARIABLE_NAME}:\" : \"this is ENVIRONMENT_VARIABLE_NAME's value -> :{ENVIRONMENT_VARIABLE_NAME}:\"\n[-]\n\n| output:\n| {'3': {'3': 'This is ENVIRONMENT_VARIABLE_NAME's value -> 3'}}\n```\n\nTo denote an environment variable wrap the variable name in `:{` and `}:` it works the same way as an f-string in python.\n\n"}}