{"root": {"projects\\Twig Web Framework\\root": {"projects\\Twig Web Framework\\root\\LICENSE.txt": "MIT License\n\nCopyright (c) 2022 William Andrew Lim\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.", "projects\\Twig Web Framework\\root\\MANIFEST.in": "include \\\n    MANIFEST.in \\\n    src/TwigWeb/backend/404.html \\\n    README.md \\\n    LICENSE.txt \\", "projects\\Twig Web Framework\\root\\pyproject.toml": "[build-system]\nrequires = [\"setuptools\"]\nbuild-backend = \"setuptools.build_meta\"", "projects\\Twig Web Framework\\root\\README.md": "# Twig 0.5.0\n\nTwig is a backend web framework for python utilizing the **socket** module to handle http requests and serve responses.\n\nTo install use the following command:\n```cli\npy -m pip install TwigWeb\n```\n\n### Changelog\n\n---\n\n**0.5.0**\n\n - Fixed dynamic router.\n\n - Implemented URL query parameters.\n\n - Implemented Headers class to separate parts of incoming request for the developer.\n\n---\n\n**0.4.0**\n\n - Added dynamic route parameters.\n\n - Improved route handling with Route class\n\n---\n\n**0.3.0**\n\n - Added static paths and folders functions.\n\n - Added element class.\n\n - Added component classes.\n\n---\n\n**0.2.0**\n\n - Added `set_all_routes` function\n\n - Fixed inconsistent request handling\n\n - Improved documentation\n\n---\n\n### Example\n\nThis example does not show all of the functionality of Twig.  There is documentation currently being worked on.\n\n```py\nfrom src.TwigWeb.backend.routehandler.route import Route, RouteParameter, RouteParamType\nfrom src.TwigWeb.backend import Server\nfrom src.TwigWeb.backend.response import Response\n\napp = Server(\"\", debug=True, open_root=False)\n\n@app.route(\"\")\ndef index(headers:Headers):\n    #this is the index of the app\n    return Response(\"test\", ContentType.html)\n\n@app.route(\"form\")\ndef form(headers:Headers):\n    #this form redirects to page/2\n    return Response(\"\"\"<form action=\"/page/2\">\n<label for=\"fname\">First name:</label><br>\n<input type=\"text\" id=\"fname\" name=\"fname\" value=\"John\"><br>\n<label for=\"lname\">Last name:</label><br>\n<input type=\"text\" id=\"lname\" name=\"lname\" value=\"Doe\"><br><br>\n<input type=\"submit\" value=\"Submit\">\n</form>\"\"\")\n\n@app.route(\"page/[num]\")\ndef index(headers:Headers, num):\n    # Headers.URL is a dictionary containing all url query parameters/variables.\n    # num a dynamic route.\n    return Response(f\"num: {num} and {headers.URL}\", ContentType.html)\n\n@app.route(\"page\")\ndef index(headers:Headers):\n    return Response(f\"page\", ContentType.html)\n\napp.run()\n```\n\n", "projects\\Twig Web Framework\\root\\setup.cfg": "[metadata]\nname = TwigWeb\nversion = 0.5.0\nauthor = William Lim\nauthor_email = William.Lim@csu.fullerton.edu\ndescription = Twig is a frontend and backend web framework utilizing the python socket module to serve http requests.\nlong_description = file: README.md\nlong_description_content_type = text/markdown\nurl = https://github.com/FrewtyPebbles/Twig-Web-Framework\nproject_urls =\n    Bug Tracker = https://github.com/FrewtyPebbles/Twig-Web-Framework/issues\nclassifiers =\n    Programming Language :: Python :: 3\n    License :: OSI Approved :: MIT License\n    Operating System :: OS Independent\n\n[options]\npackage_dir =\n    = src\npackages = find:\npython_requires = >=3.7\ninclude_package_data = True\n\n[options.packages.find]\nwhere = src", "projects\\Twig Web Framework\\root\\src": {"projects\\Twig Web Framework\\root\\src\\TwigWeb": {"projects\\Twig Web Framework\\root\\src\\TwigWeb\\backend": {"projects\\Twig Web Framework\\root\\src\\TwigWeb\\backend\\headers": {"projects\\Twig Web Framework\\root\\src\\TwigWeb\\backend\\headers\\__init__.py": "\nclass Headers:\n    def __init__(self, URL = {}, HEADERS = {}) -> None:\n        self.URL = URL\n        self.HEADERS = HEADERS"}, "projects\\Twig Web Framework\\root\\src\\TwigWeb\\backend\\response.py": "import codecs\nfrom typing import Dict\nfrom .types import ContentType\nfrom .util import utf8len\n\ndef read(path:str):\n    fl = open(path)\n    flc = fl.read()\n    fl.close()\n    return flc\n\nclass Response:\n\n    def __init__(self, Content:bytes = b\"\", ContentType:ContentType = ContentType.html, headers: Dict[str, str] = {}) -> None:\n        self.ContentType = ContentType\n        self.Content = Content\n        self.headers = headers\n\n    def generate_headers(self) -> bytes:\n        ret_head = b\"\"\n        for key, val in self.headers:\n            ret_head += f\"{key}: {val}\\n\".encode()\n        return ret_head\n    \n    def generate(self) -> str:\n        response_headers:bytes = b\"HTTP/1.1 200 OK\\n\"\n        response_headers += self.ContentType\n        response_headers += f\"Content-Length: {utf8len(self.Content)}\\n\".encode()\n        if type(self.Content) == str:\n            self.Content = self.Content.encode()\n        return self.generate_headers() + response_headers + b\"\\n\" + self.Content\n\n    def __repr__(self) -> str:\n        return self.generate()\n", "projects\\Twig Web Framework\\root\\src\\TwigWeb\\backend\\routehandler": {"projects\\Twig Web Framework\\root\\src\\TwigWeb\\backend\\routehandler\\route.py": "from __future__ import annotations\n\n\"\"\"\nroutes variables:\n    wildcards:\n         - `[var_name]` this is for an integer\n         - `(var_name)` this is for a string\n\"\"\"\n\nfrom enum import Enum\nfrom typing import List, Tuple, Union\n\nclass RouteParamType(Enum):\n    integer = \"int\"\n    string = \"str\"\n    null = \"null\"\n\nclass RouteParameter:\n    def __init__(self) -> None:\n        self.name = \"\"\n        self.type = RouteParamType.null\n\n    def __eq__(self, other:Union[str, RouteParameter]) -> bool:\n        if type(other) == str:\n            return self.type == RouteParamType.string\n        if type(other) == int:\n            return self.type == RouteParamType.integer\n        if type(other) == RouteParameter:\n            return other.name == self.name and other.type == self.type\n    \n    def __hash__(self) -> int:\n        return hash((self.name, self.type))\n        \n\nclass Route:\n    def __init__(self, raw:str) -> None:\n        self.raw = raw\n        # handle raw route and create base and parameters\n        self.parameters:Tuple[str | RouteParameter] = ()\n        self.dynamic_parameters:Tuple[RouteParameter] = ()\n        self._handle_parameters()\n\n    def __eq__(self, other: Tuple[int | str | RouteParameter]) -> bool:\n        return self.parameters == other\n\n    def __hash__(self) -> int:\n        return hash((self.raw, ) + self.parameters + self.dynamic_parameters)\n\n    def _handle_parameters(self):\n        if self.raw == \"\":\n            self.parameters = (\"\",)\n            return\n        current_scope = RouteParamType.null\n        current_parameter = RouteParameter()\n        param_str_buffer = \"\"\n        base = True\n        for chr in self.raw:\n            if chr == \"[\":\n                current_scope = RouteParamType.integer\n                base = False\n            elif chr == \"]\":\n                current_parameter.name = param_str_buffer\n                current_parameter.type = RouteParamType.integer\n                param_str_buffer = \"\"\n                self.parameters = self.parameters + (current_parameter,)\n                self.dynamic_parameters = self.dynamic_parameters + (current_parameter,)\n                current_parameter = RouteParameter()\n                current_scope = RouteParamType.null\n            elif chr == \"(\":\n                current_scope = RouteParamType.string\n                base = False\n            elif chr == \")\":\n                current_parameter.name = param_str_buffer\n                current_parameter.type = RouteParamType.string\n                param_str_buffer = \"\"\n                self.parameters = self.parameters + (current_parameter,)\n                self.dynamic_parameters = self.dynamic_parameters + (current_parameter,)\n                current_parameter = RouteParameter()\n                current_scope = RouteParamType.null\n            elif chr == \"/\":\n                if param_str_buffer != \"\":\n                    self.parameters = self.parameters + (param_str_buffer,)\n                    param_str_buffer = \"\"\n            else:\n                # get param names\n                param_str_buffer += chr\n        if param_str_buffer != \"\":\n            self.parameters = self.parameters + (param_str_buffer,)\n        ", "projects\\Twig Web Framework\\root\\src\\TwigWeb\\backend\\routehandler\\router.py": "#from .. import Server\nfrom .route import Route, RouteParamType, RouteParameter\nfrom ..headers import Headers\n\n\nfrom typing import TYPE_CHECKING\n\nif TYPE_CHECKING:\n    from .. import Server\nelse:\n    Server = any\n\ndef _handle_route(self:Server, reqpath:str, request_headers:Headers):\n    path = tuple(int(ind) if ind.isdigit() else ind for ind in reqpath.split(\"?\")[0].split(\"/\"))\n    route_key = Route(\"\")\n    fail = True\n    for key in self.routes.keys():\n        if key.parameters == path:\n            #this is the correct route\n            route_key = key\n            fail = False\n            break\n    \n    if fail:\n        return self.error_404(reqpath)\n\n\n    route_parameters = {}\n    for pn, param in enumerate(route_key.parameters):\n        if type(param) == RouteParameter:\n            if param.type == RouteParamType.integer:\n                route_parameters[param.name] = int(path[pn])\n            elif param.type == RouteParamType.string:\n                route_parameters[param.name] = path[pn]\n    try:\n        if route_parameters == {}:\n            return self.routes[route_key](request_headers).generate()\n        else:\n            return self.routes[route_key](request_headers, **route_parameters).generate()\n    except TypeError as e:\n        if self.debug:\n            print(f\"An error has occured when trying to access route ({reqpath})\\n\\nPerhapse you have the wrong (number of) arguments for this route.\\n\\nFULL ERROR:\\n\")\n            print(e)\n        return self.error_404(reqpath)\n    except Exception as e:\n        if self.debug:\n            print(\"FULL ERROR:\\n\")\n            print(e)\n        else:\n            print(e)\n        return self.error_404(reqpath)", "projects\\Twig Web Framework\\root\\src\\TwigWeb\\backend\\routehandler\\__init__.py": ""}, "projects\\Twig Web Framework\\root\\src\\TwigWeb\\backend\\runtime.py": "\"\"\"\n Twig socket server implementation\n\n\"\"\"\n\nimport os\nfrom pathlib import Path\nimport threading\nimport socket\nimport webbrowser\nfrom urllib.parse import parse_qs\nfrom typing import Callable, Dict, List, Set, Union\n\nfrom .headers import Headers\n\nfrom .routehandler.route import Route\nfrom .types import ContentType, ext_content_type\n\nfrom .util import TermCol, utf8len\nfrom . import response as res\n\nVERSION = \"0.5.0\"\n\nclass Server:\n\n    def __init__(self, root_directory,\n                    SERVER_HOST = '0.0.0.0',\n                    SERVER_PORT = 8000,\n                    verbose=False,\n                    open_root=True,\n                    debug=False,\n                    error_page_path = \"\"\n                ) -> None:\n        # Define socket host and port\n        self.SERVER_HOST = SERVER_HOST\n        self.SERVER_PORT = SERVER_PORT\n        self.root_directory = root_directory\n        self.routes:Dict[Route, Union[Callable[[Dict[str, str], Dict[str, Union[int, str]]], res.Response], Callable[[Dict[str, str]], res.Response]]] = {}\n        self.verbose = verbose\n        self.open_root = open_root\n        self.debug = debug\n        self.static_resources:Set[str] = set()\n        self.static_folders:Set[Path] = set()\n        self.error_page_path = error_page_path\n\n    from .routehandler.router import _handle_route\n\n    def set_static(self, static_resources:Set[str]):\n        self.static_resources = static_resources\n\n    def set_static_folders(self, static_folders:Set[Path]):\n        self.static_folders = static_folders\n\n    def add_static(self, static_resource:str):\n        self.static_resources.add(static_resource)\n\n    def add_static_folder(self, static_folder:Path):\n        self.static_folders.add(static_folder)\n\n    def route(self, route:str):\n        \"\"\"Decorator that sets a route to the decorated function.\"\"\"\n        def wrapper(func):\n            self.routes[Route(route)] = func\n            #print(self.routes)\n        return wrapper\n\n    def set_route(self, route:str, func):\n        \"\"\"Used to set routes from external file without decorator.\"\"\"\n        self.routes[Route(route)] = func\n\n    def set_all_routes(self, routes:Dict[str, Union[Callable[[Dict[str, str], Dict[str, Union[int, str]]], res.Response], Callable[[Dict[str, str]], res.Response]]]):\n        \"\"\"Used to set all routes from external file without decorator.\"\"\"\n        for key, val in routes.items():\n            self.routes[Route(key)] = val\n        \n\n    def run(self):\n        \"\"\"Runs the server.\"\"\"\n        self.server_runtime_handler()\n\n    def server_runtime_handler(self):\n        # Create socket\n        self.server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n        self.server_socket.bind((self.SERVER_HOST, self.SERVER_PORT))\n        self.server_socket.listen(1)\n        if self.verbose:\n            print(f\"Twig Server Version: {VERSION}\")\n        print(f'{TermCol.OKGREEN}STARTED{TermCol.ENDC} - http://localhost:{self.SERVER_PORT}/')\n        if self.open_root:\n            webbrowser.open(f\"http://localhost:{self.SERVER_PORT}/\")\n        while True:    \n            # Wait for client connections\n            client_connection, client_address = self.server_socket.accept()\n            # Handle client connection\n            threading.Thread(target=lambda: self.client_handler(client_connection, client_address), daemon=True).start()\n\n    def parse_headers(self, raw_headers:str, parsedurl:Dict[str, List[str]]) -> Dict[str, str]:\n        headers = {}\n        for raw_header in raw_headers:\n            if \": \" in raw_header:\n                h_parts = raw_header.split(\": \", 1)\n                headers[h_parts[0]] = h_parts[1].strip()\n\n        return Headers(parsedurl, headers)\n\n    def client_handler(self, client_connection: socket, client_address):\n        \n        # Get the client request\n        request:str = client_connection.recv(1024).decode()\n        # Parse HTTP headers\n        headers:List[str] = request.split('\\n')\n        main_req_params = headers[0].split()\n        reqpath = main_req_params[1]\n        if \"?\" in reqpath:\n            parsedurl = parse_qs(reqpath.split(\"?\")[1])\n        else:\n            parsedurl = {}\n        reqpath = reqpath[1:]\n\n        try:\n            \n            request_headers = self.parse_headers(headers[1:], parsedurl)\n            \n            request_print = request if self.verbose else headers[0]\n            print(f'   {TermCol.OKCYAN}REQUEST{TermCol.ENDC} - {TermCol.WARNING}{request_print}{TermCol.ENDC}\\n     {TermCol.FAIL}FROM{TermCol.ENDC} {TermCol.OKGREEN}{client_address[0]}{TermCol.ENDC}')\n            print(f'     {TermCol.FAIL}PATH{TermCol.ENDC} {TermCol.OKGREEN}\"/{reqpath}\"{TermCol.ENDC}')\n            \n            response = \"\"\n            if reqpath in self.static_resources or (all(\n                os.path.abspath(reqpath).startswith(os.path.abspath(s_p)+os.sep) \n                for s_p in self.static_folders\n                ) if len(self.static_folders) != 0 else False):\n                fl = open(reqpath, \"rb\")\n                flContent = fl.read()\n                fl.close()\n                extension:str = reqpath.split(\".\")[1]\n\n                response = res.Response(flContent, ext_content_type(extension)).generate()\n            else:\n                response = self._handle_route(reqpath, request_headers)\n        except:\n            response = self.error_404(reqpath)\n        \n        client_connection.sendall(response)\n        \n        #finish the request\n        client_connection.close()\n\n    def error_404(self, reqpath):\n        if self.debug:\n            print(f\" ERROR - The requested page or file route \\\"{reqpath}\\\" does not exist/is not defined.\\n\\nExisting Static Paths:\\n{self.static_resources}\\n\\nExisting Static Folders:\\n{self.static_folders}\\n\\nIf this is a static resource for your site (such as .png, .css, etc.), please use the add_static member function to add it to the static files you wish to serve.  If you wish to add all resources within a folder as static resources, please use the add_static_folder function.\")\n        errfile = \"\"\n        if self.error_page_path != \"\":\n            errfile = open(self.error_page_path)\n        else:\n            errfile = open(os.path.join(os.path.dirname(__file__), '404.html'))\n        ErrContent = errfile.read()\n        errfile.close()\n        return f'HTTP/1.1 404 NOT FOUND\\n\\n{ErrContent}'.encode()\n    def exit(self):\n        # Close socket\n        self.server_socket.close()", "projects\\Twig Web Framework\\root\\src\\TwigWeb\\backend\\types.py": "\nfrom enum import Enum\n\n\nclass ContentType:\n    json = b\"Content-Type: application/json\\n\"\n    plain = b\"Content-Type: text/plain\\n\"\n    txt = b\"Content-Type: text/plain\\n\"\n    html = b\"Content-Type: text/html\\n\"\n    css = b\"Content-Type: text/css\\n\"\n    wasm = b\"Content-Type: application/wasm\\n\"\n    jpeg = b\"image/jpeg\"\n    jpg = b\"image/jpeg\"\n    ico = b\"image/vnd.microsoft.icon\"\n    gif = b\"image/gif\"\n    js = b\"text/javascript\"\n    csv = b\"text/csv\"\n    mp3 = b\"audio/mpeg\"\n    mp4 = b\"video/mp4\"\n    png = b\"image/png\"\n    wav = b\"audio/wav\"\n    xml = b\"application/xml\"\n    zip = b\"application/zip\"\n    \n\ndef ext_content_type(extension:str) -> bytes:\n    return ContentType.__dict__[extension]", "projects\\Twig Web Framework\\root\\src\\TwigWeb\\backend\\util.py": "import codecs\n\n\ndef utf8len(s:str):\n    return len(s)\n\nclass TermCol:\n    HEADER = '\\033[95m'\n    OKBLUE = '\\033[94m'\n    OKCYAN = '\\033[96m'\n    OKGREEN = '\\033[92m'\n    WARNING = '\\033[93m'\n    FAIL = '\\033[91m'\n    ENDC = '\\033[0m'\n    BOLD = '\\033[1m'\n    UNDERLINE = '\\033[4m'", "projects\\Twig Web Framework\\root\\src\\TwigWeb\\backend\\__init__.py": "from .runtime import Server\nfrom . import response as Response\nfrom .types import ContentType\nfrom .. import frontend as Frontend"}, "projects\\Twig Web Framework\\root\\src\\TwigWeb\\frontend": {"projects\\Twig Web Framework\\root\\src\\TwigWeb\\frontend\\preprocessor.py": "from __future__ import annotations\nfrom typing import Dict, List\n\nclass Element:\n    def __init__(self, element:str, attributes:Dict[str, str | int | bool], scope:List[Component | Element | str]) -> None:\n        self.element = element\n        self.attributes = attributes\n        self.scope = scope\n\n    def render(self) -> str:\n        return self.__repr__()\n\n    def __repr__(self) -> str:\n        attr = \"\"\n        for key, val in self.attributes.items():\n            attr += f' {key} = \"{val}\"'\n        scope = \"\"\n        for elem in self.scope:\n            scope = f\"{scope}{elem}\"\n        return f\"<{self.element}{attr}>{scope}</{self.element}>\"\n\nclass Component:\n    def __init__(self, **props) -> None:\n        self.props = props\n        self.element_cache = \"\"\n    \n    def hydrate(self):\n        \"\"\"Class should be inherited and hydrate overwritten.\"\"\"\n\n    def render(self) -> str:\n        return self.hydrate()\n\n    def __repr__(self) -> str:\n        return self.render()", "projects\\Twig Web Framework\\root\\src\\TwigWeb\\frontend\\__init__.py": "from .preprocessor import Element, Component\n#This is where any front end functionality is kept"}, "projects\\Twig Web Framework\\root\\src\\TwigWeb\\__init__.py": "from . import backend\nfrom . import frontend"}}, "projects\\Twig Web Framework\\root\\test": {"projects\\Twig Web Framework\\root\\test\\test_route.py": "\nimport unittest\nfrom src.TwigWeb.backend.routehandler.route import Route, RouteParameter, RouteParamType\nfrom src.TwigWeb.backend import Server\nfrom src.TwigWeb.backend.response import Response\n\nclass Router(unittest.TestCase):\n\n    def test_route_eq(self):\n        rp1 = RouteParameter()\n        rp1.name = \"number\"\n        rp1.type = RouteParamType.integer\n\n        rp2 = RouteParameter()\n        rp2.name = \"string\"\n        rp2.type = RouteParamType.string\n\n        route = Route(\"api/[number]/(string)\")\n        #print(route.parameters)\n\n        self.assertEqual(route.parameters, (\"api\", 120, \"abc\"))\n    \n    def test_routehandler_static(self):\n        \n        app = Server(\"\", open_root= False)\n\n        app.set_all_routes({\n            \"test/static\": lambda headers: Response(f\"\"\"test\"\"\"),\n        })\n\n        self.assertEqual(app._handle_route(\"test/static\", {}), b'HTTP/1.1 200 OK\\nContent-Type: text/html\\nContent-Length: 4\\n\\ntest')\n\n    def test_routehandler_int_str(self):\n        \n        app = Server(\"\", open_root= False)\n\n        app.set_all_routes({\n            \"test/[number]/(name)\": lambda headers, params: Response(f\"\"\"your number: {params[\"number\"]}\\nyour name: {params[\"name\"]}\"\"\"),\n        })\n\n        self.assertEqual(app._handle_route(\"test/1/jeff\", {}), b'HTTP/1.1 200 OK\\nContent-Type: text/html\\nContent-Length: 30\\n\\nyour number: 1\\nyour name: jeff')\n\n    def test_routehandler_int_int(self):\n        \n        app = Server(\"\", open_root= False)\n\n        app.set_all_routes({\n            \"test/[number]/[number2]\": lambda headers, params: Response(f\"\"\"{params[\"number\"]}{params[\"number2\"]}\"\"\")\n        })\n\n        self.assertEqual(app._handle_route(\"test/5/2\", {}), b'HTTP/1.1 200 OK\\nContent-Type: text/html\\nContent-Length: 2\\n\\n52')", "projects\\Twig Web Framework\\root\\test\\test_server.py": "import unittest\nfrom src.TwigWeb.backend.headers import Headers\nfrom src.TwigWeb.backend import Server, ContentType\nfrom src.TwigWeb.backend.response import Response\n\nclass ServerTest(unittest.TestCase):\n    def test_server(self):\n        app = Server(\"\", debug=True, open_root=False)\n\n        @app.route(\"\")\n        def index(headers:Headers):\n            #this is the index of the app\n            return Response(\"test\", ContentType.html)\n\n        @app.route(\"form\")\n        def form(headers:Headers):\n            #this form redirects to page/2\n            return Response(\"\"\"<form action=\"/page/2\">\n  <label for=\"fname\">First name:</label><br>\n  <input type=\"text\" id=\"fname\" name=\"fname\" value=\"John\"><br>\n  <label for=\"lname\">Last name:</label><br>\n  <input type=\"text\" id=\"lname\" name=\"lname\" value=\"Doe\"><br><br>\n  <input type=\"submit\" value=\"Submit\">\n</form>\"\"\")\n\n        @app.route(\"page/[num]\")\n        def index(headers:Headers, num):\n            # Headers.URL is a dictionary containing all url query parameters/variables.\n            # num a dynamic route.\n            return Response(f\"num: {num} and {headers.URL}\", ContentType.html)\n        \n        @app.route(\"page\")\n        def index(headers:Headers):\n            return Response(f\"page\", ContentType.html)\n        \n        app.run()", "projects\\Twig Web Framework\\root\\test\\__init__.py": "from .test_route import Router\nfrom .test_server import ServerTest"}}}}